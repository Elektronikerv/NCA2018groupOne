office.findById=SELECT id, name, address_id, description FROM offices WHERE id=:id
office.deleteById=DELETE FROM offices WHERE id=:id
office.update=UPDATE offices SET (name, address_id, description) = \
   (:name, :address_id, :description)  WHERE id=:id
office.findAll=SELECT id, name, address_id, description FROM offices

office.insert.withAddress= \
WITH data(name, description ,street , house, floor, flat) AS ( \
    VALUES  (:name, :description, :street, :house, :floor, :flat) ,
address_insert AS (\
    INSERT INTO addresses(street, house, floor, flat) \
    SELECT street, house, floor, flat \
    FROM data \
    ON     CONFLICT DO NOTHING  \
    RETURNING street, house, floor, flat, id AS address_id \
    )\
INSERT INTO offices (name , description, address_id)\
SELECT name, description, address_id \
FROM data \
JOIN address_insert USING (street, house, floor, flat)

office.find.withAddress = \
  SELECT o.id , o.name, o.description, \
  a.id  AS address_id, a.street ,a.house ,a.floor ,a.flat \
  FROM offices AS o \
  JOIN addresses AS a ON o.address_id = a.id

office.findByName.withAddress = \
  SELECT o.id , o.name, o.description, \
  a.id AS address_id, a.street, a.house, a.floor, a.flat \
  FROM offices AS o \
  JOIN addresses AS a ON o.address_id = a.id \
  WHERE o.name LIKE '%'||:name||'%' \
  ORDER BY o.name ASC
office.findByStreet.withAddress = \
  SELECT o. id,o.name, o.description, \
  a.id AS address_id, a.street, a.house, a.floor, a.flat \
  FROM offices AS o \
  JOIN addresses AS a ON o.address_id = a.id \
  WHERE a.street LIKE '%'||:street||'%' \
  ORDER BY a.street ASC


advert_type.findById=SELECT id, name FROM advert_types WHERE id=:id
advert_type.deleteById=DELETE FROM advert_types WHERE id=:id
advert_type.update=UPDATE advert_types SET name = :name WHERE id=:id

adverts.findById = SELECT id, header, text, admin_id, type_id, date_of_publishing FROM adverts WHERE id=:id
adverts.findAll=SELECT id, header, text, admin_id, type_id, date_of_publishing \
  FROM adverts  \
  ORDER BY date_of_publishing DESC

adverts.findAdvertsWithType = SELECT id, header, text, admin_id, type_id, date_of_publishing \
  FROM adverts  \
  WHERE type_id = :type_id \
  ORDER BY date_of_publishing DESC

adverts.deleteById=DELETE FROM adverts WHERE id=:id
adverts.update=UPDATE adverts SET (header, text, admin_id, type_id, date_of_publishing) = (:header, :text, :admin_id, :type_id, :date_of_publishing)  WHERE id=:id

user.findByEmail=SELECT id, password, first_name, last_name, phone_number, email, manager_id, address_id, registration_date FROM users WHERE email=:email
user.findById=SELECT id, password, first_name, last_name, phone_number, email, manager_id, address_id, registration_date FROM users WHERE id=:id
user.deleteByEmail=DELETE FROM users WHERE email=:email
user.deleteById=DELETE FROM users WHERE id=:id
user.update=UPDATE users SET (password, first_name, last_name, phone_number, email, manager_id, address_id) = \
(:password, :first_name, :last_name, :phone_number, :email, :manager_id, :address_id)  WHERE id=:id
user.update_user_info=UPDATE users SET (first_name, last_name, phone_number, email, manager_id, address_id) = \
( :first_name, :last_name, :phone_number, :email, :manager_id, :address_id)  WHERE id=:id

user.update_password=UPDATE users SET (password) = \
( :password)  WHERE id=:id


user.addRole =\
  INSERT INTO users_roles (user_id, role_id) \
  VAlUES (:user_id, :role_id)

user.deleteRole = \
  DELETE FROM users_roles \
  WHERE user_id = :user_id \
  AND role_id = :role_id

user.findEmployees = \
  SELECT DISTINCT emp.id, emp.first_name, emp.last_name, emp.email,\
  emp.password, emp.phone_number, emp.address_id, emp.manager_id, emp.registration_date,\
  mgr.first_name AS manager_name, \
  a.street , a.house, a.floor, a.flat  \
  FROM users AS emp \
  LEFT JOIN addresses AS a ON emp.address_id = a.id \
  JOIN users_roles AS u_r ON emp.id = u_r.user_id \
  JOIN roles AS r ON u_r.role_id = r.id \
  LEFT JOIN users AS mgr ON emp.manager_id = mgr.id \
  WHERE r.id IN (1,2,3,4) \
  ORDER BY emp.first_name;
user.findEmployeesByLastName=\
  SELECT emp.id, emp.first_name, emp.last_name, emp.email, \
  emp.password, emp.phone_number, emp.address_id, emp.manager_id, emp.registration_date, \
  mgr.first_name AS manager_name, \
  r.name AS position, a.street , a.house, a.floor, a.flat \
  FROM users AS emp \
  LEFT JOIN addresses AS a ON emp.address_id = a.id \
  JOIN users_roles AS u_r ON emp.id = u_r.user_id \
  JOIN roles AS r ON u_r.role_id = r.id \
  LEFT JOIN users AS mgr ON emp.manager_id = mgr.id \
  WHERE r.id IN (1,2,3,4) \
  AND emp.last_name LIKE :last_name \
  ORDER BY emp.last_name ASC
user.findCouriers=\
SELECT emp.id, emp.first_name, emp.last_name, emp.email, \
emp.password, emp.phone_number, emp.address_id, emp.manager_id, emp.registration_date,  emp.current_position_id, \
mgr.first_name AS manager_name, \
r.name AS position, a.street , a.house, a.floor, a.flat \
FROM users AS emp \
LEFT JOIN addresses AS a ON emp.address_id = a.id \
JOIN users_roles AS u_r ON emp.id = u_r.user_id \
JOIN roles AS r ON u_r.role_id = r.id \
LEFT JOIN users AS mgr ON emp.manager_id = mgr.id \
WHERE r.name = 'COURIER' \
AND emp.current_position_id IS NOT NULL;
user.findEmployeesByManager=\
  SELECT DISTINCT emp.id, emp.first_name, emp.last_name, emp.email, emp.password, \
  emp.registration_date, \
  emp.phone_number, emp.address_id, emp.manager_id, \
  mgr.first_name AS manager_name, \
  a.street , a.house, a.floor, a.flat \
  FROM users AS emp \
  LEFT JOIN addresses AS a ON emp.address_id = a.id \
  JOIN users_roles AS u_r ON emp.id = u_r.user_id \
  JOIN roles AS r ON u_r.role_id = r.id \
  LEFT JOIN users AS mgr ON emp.manager_id = mgr.id \
  WHERE (r.id IN (1,2,3,4) \
  AND mgr.id = :id \
  ORDER BY emp.last_name ASC

user.createEmployee = \
  WITH data(email, password, first_name, last_name, \
   phone_number, registration_date, manager_id, \
  street , house, floor, flat) AS ( \
  VALUES  (:email, :password, :first_name, \
  :last_name, :phone_number, :registration_date, :manager_id, \
  :street, :house, :floor, :flat)) , \
  address_insert AS ( \
  INSERT INTO addresses(street, house, floor, flat) \
  SELECT street, house, floor, flat FROM data \
  ON     CONFLICT DO NOTHING \
  RETURNING street, house, floor, flat, id AS address_id)\
  INSERT INTO users (email, password, first_name, last_name, phone_number,\
  registration_date , manager_id, address_id) \
  SELECT email, password, first_name, last_name, phone_number, \
  registration_date,  manager_id, address_id \
  FROM data\
  JOIN address_insert USING (street, house, floor, flat) ;

user.updateEmployee= \
  WITH data1(name, description ,street , house, floor, flat) AS ( \
  VALUES  (:name, :description , :street , :house, :floor, :flat)), \
  data AS ( \
  UPDATE addresses AS a \
  SET (street, house, floor, flat) = (street, house, floor, flat) \
  WHERE a.id = :address_id \
  RETURNING a.id AS addr_id) \
  UPDATE users AS emp \
  SET (email, password, first_name, last_name, phone_number, \
  registration_date , manager_id, address_id) = \
  (:email, :password, :first_name, :last_name, :phone_number, \
  :registration_date , :manager_id, addr_id) \
  FROM data \
  WHERE emp.id=:id



address.findById=SELECT id, street, house, floor, flat FROM addresses WHERE id=:id
address.deleteById=DELETE FROM addresses WHERE id=:id
address.update=UPDATE addresses SET (street, house, floor, flat) = \
   (:street, :house, :floor, :flat)  WHERE id=:id

fulfillment_order.findById=SELECT id, order_id, ccagent_id, courier_id, confirmation_time, shipping_time, attempt FROM fulfillment_orders WHERE id=:id
fulfillment_order.deleteById=DELETE FROM fulfillment_orders WHERE id=:id
fulfillment_order.update=UPDATE fulfillment_orders SET (order_id, ccagent_id, courier_id, confirmation_time, shipping_time, attempt) = \
   (:order_id, :ccagent_id, :courier_id, :confirmation_time, :shipping_time, :attempt)  WHERE id=:id

fulfillment_order.findByStatusByCourier = \
    SELECT fulfillment_orders.id AS id, order_id, ccagent_id, courier_id, \
    confirmation_time, shipping_time, attempt \
    FROM fulfillment_orders \
    JOIN orders ON fulfillment_orders.order_id = orders.id \
    WHERE courier_id = :courier_id  \
    AND orders.order_status_id = :order_status_id

fulfillment_order.findByCourierAndByStatus = \
    SELECT fulfillment_orders.id , orders.id, fulfillment_order.confirmation_time, orders.receiver_address_id, \
    receiver_address.street, orders.sender_address_id, sender_address.street, orders.office_id,\
    office_address.street \
    FROM services \
    JOIN orders ON fulfillment_orders.order_id = orders.id \
    LEFT JOIN offices ON orders.office_id = offices.id \
    LEFT JOIN addresses AS office_address ON offices.address_id = office_address.id \
    JOIN addresses receiver_address ON orders.receiver_address_id = receiver_address.id \
    JOIN addresses sender_address ON orders.sender_address_id = sender_address.id \
    WHERE courier_id = :courier_id  \
    AND orders.order_status_id = :order_status_id

order.findById=SELECT  id, user_id,  office_id, order_status_id, receiver_address_id, sender_address_id, description, feedback, creation_time, execution_time, parent_id  FROM orders WHERE id=:id
order.deleteById=DELETE FROM orders WHERE id=:id
order.update=UPDATE orders SET (user_id, office_id, order_status_id, receiver_address_id, sender_address_id, description, feedback, creation_time, execution_time) = (:user_id, :office_id, :order_status_id, :receiver_address_id, :sender_address_id, :description, feedback, :creation_time, :execution_time)  WHERE id=:id
order.findAllOrders=SELECT id, user_id,  office_id, order_status_id, receiver_address_id, sender_address_id, description, feedback, creation_time, execution_time, parent_id  FROM orders
order.findAllOpenOrders=SELECT id, user_id,  office_id, order_status_id, receiver_address_id, sender_address_id, description, feedback, creation_time, execution_time, parent_id  FROM orders WHERE order_status_id=6
order.findAllProcessingOrders=\
  SELECT id, user_id,  office_id, order_status_id, receiver_address_id, sender_address_id, \
  description, feedback, creation_time, execution_time, parent_id  FROM orders WHERE order_status_id=3
order.findByUserId=SELECT id, user_id,  office_id, order_status_id, receiver_address_id, sender_address_id, description, feedback, creation_time, execution_time, parent_id  FROM orders WHERE user_id=:user_id
order.findAllConfirmedOrders=\
SELECT o.id, o.user_id,  o.office_id, o.order_status_id, o.receiver_address_id, o.sender_address_id, \
o.description, o.feedback, o.creation_time, o.execution_time, o.parent_id \
FROM orders AS o \
JOIN order_status AS o_s ON o.order_status_id = o_s.id \
JOIN users AS u ON o.user_id = u.id \
JOIN users_roles AS u_r ON u.id = u_r.user_id \
JOIN roles AS r ON u_r.role_id = r.id \
WHERE o_s.name = 'CONFIRMED' \
ORDER BY r.id ASC, o.creation_time ASC \

working_day.findById=SELECT id, user_id, workday_end, workday_start, worked_out FROM working_days WHERE id=:id
working_day.deleteById=DELETE FROM working_days WHERE id=:id
working_day.update=UPDATE working_days SET (user_id, workday_end, workday_start, worked_out) = (:user_id, :workday_start, :workday_start, :worked_out)  WHERE id=:id

order_status.findById=SELECT id, name, description FROM order_status WHERE id=:id
order_status.deleteById=DELETE FROM order_status WHERE id=:id
order_status.update=UPDATE order_status SET (name, description) = \
   (:name, :description)  WHERE id=:id

role.findById=SELECT id, name, description FROM roles WHERE id=:id
role.deleteById=DELETE FROM roles WHERE id=:id
role.update=UPDATE roles SET (name, description) = (:name, :description)  WHERE id=:id
role.findByUserId=SELECT role_id FROM users_roles WHERE user_id=:user_id
courier.findAllFreeCouriers=\
SELECT u.id, u.email, u.password, u.first_name, u.last_name, \
u.phone_number, u.manager_id, u.address_id, u.registration_date \
FROM users as u \
JOIN users_roles as ur ON u.id = ur.user_id \
JOIN roles as r ON r.id = ur.role_id \
JOIN fulfillment_orders as ffo ON ffo.courier_id != u.id \
WHERE r.name = 'COURIER';