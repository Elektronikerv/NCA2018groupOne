office.findById=SELECT id, name, address_id, description \
  FROM offices \
  WHERE id=:id
#
office.deleteById=DELETE FROM offices \
  WHERE id=:id
#
office.update=UPDATE offices \
  SET (name, address_id, description) \
  =  (:name, :address_id, :description)  \
  WHERE id=:id
#
office.findAll=SELECT id, name, address_id, description \
  FROM offices
#
office.findAll.ascByid=SELECT id, name, address_id, description \
  FROM offices \
  ORDER BY id
#
office.findAll.descByid=SELECT id, name, address_id, description \
  FROM offices \
  ORDER BY id DESC
#
office.findAll.ascByName=SELECT id, name, address_id, description \
  FROM offices \
  ORDER BY name
#
office.findAll.descByName=SELECT id, name, address_id, description \
  FROM offices \
  ORDER BY name DESC
#
office.findAll.ascByAddress=SELECT o.id, o.name, o.address_id, o.description \
  FROM offices o INNER JOIN  addresses a ON o.address_id = a.id \
  ORDER BY a.street, a.house, a.floor, a.flat
#
office.findAll.descByAddress=SELECT o.id, o.name, o.address_id, o.description  \
  FROM offices o INNER JOIN  addresses a ON o.address_id = a.id \
  ORDER BY a.street DESC, a.house DESC, a.floor DESC, a.flat DESC;
#
office.insert.withAddress=\
WITH data(name, description ,street , house, floor, flat) AS ( \
    VALUES  (:name, :description, :street, :house, :floor, :flat) , \
address_insert AS (\
    INSERT INTO addresses(street, house, floor, flat) \
    SELECT street, house, floor, flat \
    FROM data \
    ON     CONFLICT DO NOTHING  \
    RETURNING street, house, floor, flat, id AS address_id \
    ) \
INSERT INTO offices (name , description, address_id) \
SELECT name, description, address_id \
FROM data \
JOIN address_insert USING (street, house, floor, flat)
#
office.find.withAddress=\
  SELECT o.id , o.name, o.description, \
  a.id  AS address_id, a.street ,a.house ,a.floor ,a.flat \
  FROM offices AS o \
  JOIN addresses AS a ON o.address_id = a.id
#
office.findByName.withAddress=\
  SELECT o.id , o.name, o.description, \
  a.id AS address_id, a.street, a.house, a.floor, a.flat \
  FROM offices AS o \
  JOIN addresses AS a ON o.address_id = a.id \
  WHERE o.name LIKE '%'||:name||'%' \
  ORDER BY o.name ASC
#
office.findByStreet.withAddress=\
  SELECT o. id,o.name, o.description, \
  a.id AS address_id, a.street, a.house, a.floor, a.flat \
  FROM offices AS o \
  JOIN addresses AS a ON o.address_id = a.id \
  WHERE a.street LIKE '%'||:street||'%' \
  ORDER BY a.street ASC
#
#
advert_type.findById=SELECT id, name \
  FROM advert_types \
  WHERE id=:id
#
advert_type.deleteById=DELETE \
  FROM advert_types \
  WHERE id=:id
#
advert_type.update=UPDATE advert_types \
  SET name = :name \
  WHERE id=:id
#
adverts.findById=SELECT id, header, text, admin_id, type_id, date_of_publishing \
  FROM adverts \
  WHERE id=:id
#
adverts.findAll=SELECT id, header, text, admin_id, type_id, date_of_publishing \
  FROM adverts  \
  ORDER BY date_of_publishing DESC
#
adverts.findAdvertsWithType=SELECT id, header, text, admin_id, type_id, date_of_publishing \
  FROM adverts  \
  WHERE type_id = :type_id \
  ORDER BY date_of_publishing DESC
#
adverts.deleteById=DELETE FROM adverts \
  WHERE id=:id
#
adverts.update=UPDATE adverts \
  SET (header, text, admin_id, type_id, date_of_publishing) \
  = (:header, :text, :admin_id, :type_id, :date_of_publishing)  \
  WHERE id=:id
#
#
user.findByEmail=SELECT id,  first_name, last_name, password, phone_number, email, manager_id, address_id, registration_date, current_position_id \
  FROM users \
  WHERE email=:email
#
user.findById=SELECT id, first_name, last_name, password, \
  phone_number, email, manager_id, address_id, registration_date, current_position_id \
  FROM users \
  WHERE id=:id
#
user.deleteByEmail=DELETE FROM users \
  WHERE email=:email
#
user.deleteById=DELETE FROM users \
  WHERE id=:id
#
user.update=UPDATE users \
  SET (password, first_name, last_name, phone_number, email, manager_id, address_id) \
  = (:password, :first_name, :last_name, :phone_number, :email, :manager_id, :address_id) \
   WHERE id=:id
#
user.update_user_info=UPDATE users \
  SET (first_name, last_name, phone_number, email, manager_id, address_id)\
   = ( :first_name, :last_name, :phone_number, :email, :manager_id, :address_id)  \
  WHERE id=:id
#
user.update_password=\
  UPDATE users \
  SET password = :password  \
  WHERE id=:id
#
user.update_client_role_to_vip=\
UPDATE users_roles \
SET role_id=5 \
WHERE user_id = :user_id \
AND role_id = 6
#
user.update_client_role_to_client=\
UPDATE users_roles \
SET role_id=6 \
WHERE user_id = :user_id \
AND role_id = 5
#
user.addRole=\
INSERT INTO users_roles (user_id, role_id) \
VAlUES (:user_id, :role_id);
#
user.deleteRole=\
  DELETE FROM users_roles \
  WHERE user_id = :user_id \
  AND role_id = :role_id
#
user.findEmployees=\
  SELECT DISTINCT emp.id, emp.first_name, emp.last_name, emp.email,\
  emp.password, emp.phone_number, emp.address_id, emp.manager_id, emp.registration_date,\
  mgr.first_name AS manager_name, emp.current_position_id,  \
  a.street , a.house, a.floor, a.flat  \
  FROM users AS emp \
  LEFT JOIN addresses AS a ON emp.address_id = a.id \
  JOIN users_roles AS u_r ON emp.id = u_r.user_id \
  JOIN roles AS r ON u_r.role_id = r.id \
  LEFT JOIN users AS mgr ON emp.manager_id = mgr.id \
  WHERE r.id IN (1,2,3,4) \
  ORDER BY emp.first_name;
#
user.findEmployees.ascById=\
  SELECT DISTINCT emp.id, emp.first_name, emp.last_name, emp.email,\
  emp.password, emp.phone_number, emp.address_id, emp.manager_id, emp.registration_date,\
  mgr.first_name AS manager_name, emp.current_position_id,  \
  a.street , a.house, a.floor, a.flat  \
  FROM users AS emp \
  LEFT JOIN addresses AS a ON emp.address_id = a.id \
  JOIN users_roles AS u_r ON emp.id = u_r.user_id \
  JOIN roles AS r ON u_r.role_id = r.id \
  LEFT JOIN users AS mgr ON emp.manager_id = mgr.id \
  WHERE r.id IN (1,2,3,4) \
  ORDER BY emp.id ASC;
#
user.findEmployees.ascByFirstName=\
  SELECT DISTINCT emp.id, emp.first_name, emp.last_name, emp.email,\
  emp.password, emp.phone_number, emp.address_id, emp.manager_id, emp.registration_date,\
  mgr.first_name AS manager_name, emp.current_position_id,  \
  a.street , a.house, a.floor, a.flat  \
  FROM users AS emp \
  LEFT JOIN addresses AS a ON emp.address_id = a.id \
  JOIN users_roles AS u_r ON emp.id = u_r.user_id \
  JOIN roles AS r ON u_r.role_id = r.id \
  LEFT JOIN users AS mgr ON emp.manager_id = mgr.id \
  WHERE r.id IN (1,2,3,4) \
  ORDER BY emp.first_name ASC;
#
user.findEmployees.ascByLastName=\
  SELECT DISTINCT emp.id, emp.first_name, emp.last_name, emp.email,\
  emp.password, emp.phone_number, emp.address_id, emp.manager_id, emp.registration_date,\
  mgr.first_name AS manager_name, emp.current_position_id,  \
  a.street , a.house, a.floor, a.flat  \
  FROM users AS emp \
  LEFT JOIN addresses AS a ON emp.address_id = a.id \
  JOIN users_roles AS u_r ON emp.id = u_r.user_id \
  JOIN roles AS r ON u_r.role_id = r.id \
  LEFT JOIN users AS mgr ON emp.manager_id = mgr.id \
  WHERE r.id IN (1,2,3,4) \
  ORDER BY emp.last_name ASC;
#
user.findEmployees.descById=\
  SELECT DISTINCT emp.id, emp.first_name, emp.last_name, emp.email,\
  emp.password, emp.phone_number, emp.address_id, emp.manager_id, emp.registration_date,\
  mgr.first_name AS manager_name, emp.current_position_id,  \
  a.street , a.house, a.floor, a.flat  \
  FROM users AS emp \
  LEFT JOIN addresses AS a ON emp.address_id = a.id \
  JOIN users_roles AS u_r ON emp.id = u_r.user_id \
  JOIN roles AS r ON u_r.role_id = r.id \
  LEFT JOIN users AS mgr ON emp.manager_id = mgr.id \
  WHERE r.id IN (1,2,3,4) \
  ORDER BY emp.id DESC;
#
user.findEmployees.descByFirstName=\
  SELECT DISTINCT emp.id, emp.first_name, emp.last_name, emp.email,\
  emp.password, emp.phone_number, emp.address_id, emp.manager_id, emp.registration_date,\
  mgr.first_name AS manager_name, emp.current_position_id,  \
  a.street , a.house, a.floor, a.flat  \
  FROM users AS emp \
  LEFT JOIN addresses AS a ON emp.address_id = a.id \
  JOIN users_roles AS u_r ON emp.id = u_r.user_id \
  JOIN roles AS r ON u_r.role_id = r.id \
  LEFT JOIN users AS mgr ON emp.manager_id = mgr.id \
  WHERE r.id IN (1,2,3,4) \
  ORDER BY emp.first_name DESC;
#
user.findEmployees.descByLastName=\
  SELECT DISTINCT emp.id, emp.first_name, emp.last_name, emp.email,\
  emp.password, emp.phone_number, emp.address_id, emp.manager_id, emp.registration_date,\
  mgr.first_name AS manager_name, emp.current_position_id,  \
  a.street , a.house, a.floor, a.flat  \
  FROM users AS emp \
  LEFT JOIN addresses AS a ON emp.address_id = a.id \
  JOIN users_roles AS u_r ON emp.id = u_r.user_id \
  JOIN roles AS r ON u_r.role_id = r.id \
  LEFT JOIN users AS mgr ON emp.manager_id = mgr.id \
  WHERE r.id IN (1,2,3,4) \
  ORDER BY emp.last_name DESC;
#
user.findEmployeesByLastName=\
  SELECT emp.id, emp.first_name, emp.last_name, emp.email, \
  emp.password, emp.phone_number, emp.address_id, emp.manager_id, emp.registration_date, \
  mgr.first_name AS manager_name, emp.current_position_id, \
  r.name AS position, a.street , a.house, a.floor, a.flat \
  FROM users AS emp \
  LEFT JOIN addresses AS a ON emp.address_id = a.id \
  JOIN users_roles AS u_r ON emp.id = u_r.user_id \
  JOIN roles AS r ON u_r.role_id = r.id \
  LEFT JOIN users AS mgr ON emp.manager_id = mgr.id \
  WHERE r.id IN (1,2,3,4) \
  AND emp.last_name LIKE '%'||:last_name||'%' \
  ORDER BY emp.last_name ASC
#
#SELECT emp.id, emp.first_name, emp.last_name, emp.email, \
#emp.password, emp.phone_number, emp.address_id, emp.manager_id, emp.registration_date,  emp.current_position_id, \
#mgr.first_name AS manager_name, \
#r.name AS position, a.street , a.house, a.floor, a.flat \
#FROM users AS emp \
#LEFT JOIN addresses AS a ON emp.address_id = a.id \
#JOIN users_roles AS u_r ON emp.id = u_r.user_id \
#JOIN roles AS r ON u_r.role_id = r.id \
#LEFT JOIN users AS mgr ON emp.manager_id = mgr.id \
#WHERE r.name = 'COURIER' \
#AND emp.current_position_id IS NOT NULL;
user.findEmployeesByManager=\
  SELECT DISTINCT emp.id, emp.first_name, emp.last_name, emp.email, emp.password, \
  emp.registration_date, \
  emp.phone_number, emp.address_id, emp.manager_id, \
  mgr.first_name AS manager_name, emp.current_position_id,\
  a.street , a.house, a.floor, a.flat \
  FROM users AS emp \
  LEFT JOIN addresses AS a ON emp.address_id = a.id \
  JOIN users_roles AS u_r ON emp.id = u_r.user_id \
  JOIN roles AS r ON u_r.role_id = r.id \
  LEFT JOIN users AS mgr ON emp.manager_id = mgr.id \
  WHERE (r.id IN (1,2,3,4) \
  AND mgr.id = :id) \
  ORDER BY emp.last_name ASC
#
user.findEmployeesByManagerWithCounts=\
SELECT DISTINCT u.id, u.first_name, u.last_name,\
    (SELECT COUNT(*) \
        FROM fulfillment_orders AS f_o \
        JOIN orders AS o ON f_o.order_id = o.id \
        JOIN order_status AS o_s ON o.order_status_id = o_s.id \
            WHERE ccagent_id = u.id \
            AND confirmation_time IS NULL \
            AND o_s.name = 'PROCESSING' \
            AND f_o.attempt = \
                (SELECT f_o1.attempt \
                    FROM fulfillment_orders AS f_o1 \
                    JOIN orders AS o1 ON f_o1.order_id = o1.id \
                        WHERE f_o1.ccagent_id = u.id \
                        AND o1.id = o.id \
    ORDER BY f_o1.id DESC LIMIT 1)) "processing", \
    (SELECT COUNT(*) \
        FROM fulfillment_orders AS f_o \
        JOIN orders AS o ON f_o.order_id = o.id \
        JOIN order_status AS o_s ON o.order_status_id = o_s.id \
            WHERE ccagent_id = u.id \
            AND confirmation_time::date = NOW()::date \
            OR (o_s.name = 'CANCELLED' \
            AND f_o.attempt = \
                (SELECT f_o1.attempt \
                    FROM fulfillment_orders AS f_o1 \
                    JOIN orders AS o1 ON f_o1.order_id = o1.id \
                        WHERE ccagent_id = u.id \
                        AND o1.id = o.id \
    ORDER BY f_o1.id DESC LIMIT 1))) "confirmed_cancelled", \
    (SELECT COUNT(*) \
        FROM fulfillment_orders AS f_o \
        JOIN orders AS o ON f_o.order_id = o.id \
        JOIN order_status AS o_s ON o.order_status_id = o_s.id \
            WHERE courier_id = u.id \
            AND (o_s.name = 'DELIVERING' OR o_s.name = 'EXECUTION') \
            AND f_o.attempt = \
                (SELECT f_o1.attempt \
                    FROM fulfillment_orders AS f_o1 \
                    JOIN orders AS o1 ON f_o1.order_id = o1.id \
                        WHERE f_o1.courier_id = u.id \
                        AND o1.id = o.id \
    ORDER BY f_o1.id DESC LIMIT 1)) "delivering_execution", \
    (SELECT COUNT(*) \
        FROM fulfillment_orders AS f_o \
        JOIN orders AS o ON f_o.order_id = o.id \
        JOIN order_status AS o_s ON o.order_status_id = o_s.id \
            WHERE courier_id = u.id \
            AND receiving_time::date = NOW()::date \
            OR f_o.attempt != \
                (SELECT f_o1.attempt FROM fulfillment_orders AS f_o1 \
                JOIN orders AS o1 ON f_o1.order_id = o1.id \
                WHERE f_o1.courier_id = u.id \
                AND o1.id = o.id \
    ORDER BY f_o1.id DESC LIMIT 1)) "delivered_other", \
    (SELECT COUNT(*) \
        FROM working_days \
            WHERE user_id = u.id \
            AND EXTRACT(MONTH FROM workday_start) = EXTRACT(MONTH FROM NOW()) \
            AND worked_out = TRUE) "working_days", \
    (SELECT CAST(COUNT(*) AS BIT) \
        FROM working_days \
        WHERE user_id = u.id \
        AND  (NOW() BETWEEN workday_start AND workday_end)) "working_now" \
    FROM users AS u \
    LEFT JOIN users AS manager ON u.manager_id = manager.id \
    JOIN users_roles AS u_r ON u_r.user_id = u.id \
    JOIN roles AS r ON u_r.role_id = r.id \
        WHERE r.name IN('CALL_CENTER_AGENT','COURIER') \
        AND manager.id = :id \
ORDER BY u.last_name
#
#
user.findEmployeesByManagerAndLastNameWithCounts=\
SELECT DISTINCT u.id, u.first_name, u.last_name,\
(SELECT COUNT(*) \
FROM fulfillment_orders AS f_o \
JOIN orders AS o ON f_o.order_id = o.id \
JOIN order_status AS o_s ON o.order_status_id = o_s.id \
WHERE ccagent_id = u.id \
AND confirmation_time IS NULL \
AND o_s.name = 'PROCESSING' \
AND f_o.attempt = (SELECT f_o1.attempt FROM fulfillment_orders AS f_o1 \
JOIN orders AS o1 ON f_o1.order_id = o1.id \
WHERE f_o1.ccagent_id = u.id \
AND o1.id = o.id \
ORDER BY f_o1.id DESC LIMIT 1)) "processing", \
(SELECT COUNT(*) \
FROM fulfillment_orders AS f_o \
JOIN orders AS o ON f_o.order_id = o.id \
JOIN order_status AS o_s ON o.order_status_id = o_s.id \
WHERE ccagent_id = u.id \
AND confirmation_time::date = NOW()::date \
OR (o_s.name = 'CANCELLED' \
AND f_o.attempt = (SELECT f_o1.attempt FROM fulfillment_orders AS f_o1 \
JOIN orders AS o1 ON f_o1.order_id = o1.id \
WHERE ccagent_id = u.id \
AND o1.id = o.id \
ORDER BY f_o1.id DESC LIMIT 1))) "confirmed_cancelled", \
(SELECT COUNT(*) \
FROM fulfillment_orders AS f_o \
JOIN orders AS o ON f_o.order_id = o.id \
JOIN order_status AS o_s ON o.order_status_id = o_s.id \
WHERE courier_id = u.id \
AND (o_s.name = 'DELIVERING' OR o_s.name = 'EXECUTION') \
AND f_o.attempt = (SELECT f_o1.attempt FROM fulfillment_orders AS f_o1 \
JOIN orders AS o1 ON f_o1.order_id = o1.id \
WHERE f_o1.courier_id = u.id \
AND o1.id = o.id \
ORDER BY f_o1.id DESC LIMIT 1)) "delivering_execution", \
(SELECT COUNT(*) \
FROM fulfillment_orders AS f_o \
JOIN orders AS o ON f_o.order_id = o.id \
JOIN order_status AS o_s ON o.order_status_id = o_s.id \
WHERE courier_id = u.id \
AND receiving_time::date = NOW()::date \
OR f_o.attempt != (SELECT f_o1.attempt FROM fulfillment_orders AS f_o1 \
JOIN orders AS o1 ON f_o1.order_id = o1.id \
WHERE f_o1.courier_id = u.id \
AND o1.id = o.id \
ORDER BY f_o1.id DESC LIMIT 1)) "delivered_other", \
(SELECT COUNT(*) \
FROM working_days \
WHERE user_id = u.id \
AND EXTRACT(MONTH FROM workday_start) = EXTRACT(MONTH FROM NOW()) \
AND worked_out = TRUE) "working_days", \
(SELECT CAST(COUNT(*) AS BIT) \
FROM working_days \
WHERE user_id = u.id \
AND  (NOW() BETWEEN workday_start AND workday_end)) "working_now" \
FROM users AS u \
LEFT JOIN users AS manager ON u.manager_id = manager.id \
JOIN users_roles AS u_r ON u_r.user_id = u.id \
JOIN roles AS r ON u_r.role_id = r.id \
WHERE r.name IN('CALL_CENTER_AGENT','COURIER') \
AND manager.id = :id \
AND u.last_name LIKE '%'||:last_name||'%' \
ORDER BY u.last_name
#
user.createEmployee=\
  WITH data(email, password, first_name, last_name, \
   phone_number, registration_date, manager_id, \
  street , house, floor, flat) AS ( \
  VALUES  (:email, :password, :first_name, \
  :last_name, :phone_number, :registration_date, :manager_id, \
  :street, :house, :floor, :flat)) , \
  address_insert AS ( \
  INSERT INTO addresses(street, house, floor, flat) \
  SELECT street, house, floor, flat FROM data \
  ON     CONFLICT DO NOTHING \
  RETURNING street, house, floor, flat, id AS address_id)\
  INSERT INTO users (email, password, first_name, last_name, phone_number,\
  registration_date , manager_id, address_id) \
  SELECT email, password, first_name, last_name, phone_number, \
  registration_date,  manager_id, address_id \
  FROM data\
  JOIN address_insert USING (street, house, floor, flat) ;
#
user.updateEmployee=\
  WITH data1(name, description ,street , house, floor, flat) AS ( \
  VALUES  (:name, :description , :street , :house, :floor, :flat)), \
  data AS ( \
  UPDATE addresses AS a \
  SET (street, house, floor, flat) = (street, house, floor, flat) \
  WHERE a.id = :address_id \
  RETURNING a.id AS addr_id) \
  UPDATE users AS emp \
  SET (email, password, first_name, last_name, phone_number, \
  registration_date , manager_id, address_id) = \
  (:email, :password, :first_name, :last_name, :phone_number, \
  :registration_date , :manager_id, addr_id) \
  FROM data \
  WHERE emp.id=:id
#
#
user.findAllManagers=\
  SELECT DISTINCT emp.id, emp.first_name, emp.last_name, emp.email, \
  emp.password, emp.phone_number, emp.address_id, emp.manager_id, emp.registration_date, \
  mgr.first_name AS manager_name, emp.current_position_id, \
  a.street , a.house, a.floor, a.flat \
  FROM users AS emp \
  LEFT JOIN addresses AS a ON emp.address_id = a.id \
  JOIN users_roles AS u_r ON emp.id = u_r.user_id \
  JOIN roles AS r ON u_r.role_id = r.id \
  LEFT JOIN users AS mgr ON emp.manager_id = mgr.id \
  WHERE r.id = 2 \
  ORDER BY emp.first_name;
user.findManagerByEmployeeId=\
  SELECT u.id, u.first_name, u.last_name, u.email, \
  u.password, u.phone_number, u.address_id, u.manager_id, u.registration_date, \
  a.street, a.house, a.floor, a.flat, r.name, u.current_position_id \
  from users u JOIN addresses a ON u.address_id = a.id \
  JOIN users_roles ur ON u.id = ur.user_id \
  JOIN roles r ON ur.role_id = r.id \
  where u.id = (SELECT manager_id \
  from users \
  where id = :employeeId);
address.findById=SELECT id, street, house, floor, flat \
  FROM addresses \
  WHERE id=:id
#
address.deleteById=DELETE FROM addresses W\
  HERE id=:id
#
address.update=UPDATE addresses \
  SET (street, house, floor, flat) \
  =  (:street, :house, :floor, :flat)  \
  WHERE id=:id
#
#
fulfillment_order.findById=SELECT id, order_id, ccagent_id, courier_id, \
  confirmation_time, receiving_time, shipping_time, attempt \
  FROM fulfillment_orders \
  WHERE id=:id
#
fulfillment_order.deleteById=DELETE FROM fulfillment_orders \
  WHERE id=:id
#
fulfillment_order.update=UPDATE fulfillment_orders \
  SET (order_id, ccagent_id, courier_id, confirmation_time, receiving_time, shipping_time, attempt)\
   = (:order_id, :ccagent_id, :courier_id, :confirmation_time, :receiving_time, :shipping_time, :attempt)\
    WHERE id=:id
#
fulfillment_order.updateCcagent=UPDATE fulfillment_orders \
    SET ccagent_id = :ccagent_id \
    WHERE id = :id
#
fulfillment_order.findByCourier=\
    SELECT fulfillment_orders.id AS id, order_id, ccagent_id, courier_id, \
    confirmation_time, receiving_time, shipping_time, attempt \
    FROM fulfillment_orders \
    JOIN orders ON fulfillment_orders.order_id = orders.id \
    WHERE courier_id = :courier_id \
    AND orders.order_status_id IN (8,9) \
    ORDER BY orders.order_status_id
#
fulfillment_order.findByCcagent=\
    (SELECT fulfillment_orders.id AS id, order_id, ccagent_id, courier_id, \
    confirmation_time, receiving_time, shipping_time, attempt \
    FROM fulfillment_orders \
    JOIN orders ON fulfillment_orders.order_id = orders.id \
    WHERE ccagent_id = :ccagent_id \
    AND orders.order_status_id IN (5,6) \
    ORDER BY orders.order_status_id, orders.creation_time)\
UNION \
      (SELECT fulfillment_orders.id AS id, order_id, ccagent_id, courier_id, \
    confirmation_time, receiving_time, shipping_time, attempt \
    FROM fulfillment_orders \
    JOIN orders ON fulfillment_orders.order_id = orders.id \
    WHERE orders.order_status_id IN (5,6) \
    ORDER BY orders.order_status_id, orders.creation_time)
#
fulfillment_order.findByOrder=\
SELECT id, order_id, ccagent_id, courier_id, confirmation_time, \
  receiving_time, shipping_time, attempt \
  FROM fulfillment_orders AS ffo \
  WHERE order_id = :id
#
fulfillment_order.findActualByOrder=\
SELECT id, order_id, ccagent_id, courier_id, confirmation_time, \
  receiving_time, shipping_time, attempt \
  FROM fulfillment_orders AS ffo \
  WHERE order_id = :id \
  AND attempt = \
    (SELECT MAX(attempt) \
        FROM fulfillment_orders \
        WHERE order_id=:id)
#
fulfillment_order.findForCourier=\
SELECT fulfillment_orders.id AS id , orders.id AS order_id, \
  orders.order_status_id AS status_id , order_status.name AS status, \
  fulfillment_orders.confirmation_time AS confirmation_time, orders.creation_time AS creation_time, \
  sender_address.street AS sender_street , sender_address.house AS sender_house, \
  office_address.street AS office_street, office_address.house AS office_house, \
  receiver_address.street AS receiver_street  , receiver_address.house AS receiver_house \
  FROM fulfillment_orders AS fulfillment_orders \
  JOIN orders AS orders ON fulfillment_orders.order_id = orders.id \
  JOIN order_status AS order_status ON orders.order_status_id = order_status.id \
  LEFT JOIN offices AS offices ON orders.office_id = offices.id \
  JOIN addresses AS office_address ON offices.address_id = office_address.id \
  LEFT JOIN addresses AS sender_address ON orders.sender_address_id = sender_address.id \
  JOIN addresses receiver_address ON orders.receiver_address_id = receiver_address.id \
  WHERE courier_id = :courier_id \
  AND orders.order_status_id IN (8,9) \
  ORDER BY orders.order_status_id ASC , orders.creation_time ASC
#
#fulfillment_order.findForCcagent=\
#SELECT fulfillment_orders.id AS id , orders.id AS order_id, \
#  orders.order_status_id AS status_id , order_status.name AS status, \
#  fulfillment_orders.confirmation_time AS confirmation_time, orders.creation_time AS creation_time, \
#  sender_address.street AS sender_street , sender_address.house AS sender_house, \
#  office_address.street AS office_street, office_address.house AS office_house, \
#  receiver_address.street AS receiver_street  , receiver_address.house AS receiver_house \
#  FROM fulfillment_orders AS fulfillment_orders \
#  JOIN orders AS orders ON fulfillment_orders.order_id = orders.id \
#  JOIN order_status AS order_status ON orders.order_status_id = order_status.id \
#  LEFT JOIN offices AS offices ON orders.office_id = offices.id \
#  JOIN addresses AS office_address ON offices.address_id = office_address.id \
#  LEFT JOIN addresses AS sender_address ON orders.sender_address_id = sender_address.id \
#  JOIN addresses receiver_address ON orders.receiver_address_id = receiver_address.id \
#  WHERE courier_id = :courier_id \
#  AND orders.order_status_id IN (5,6) \
#  ORDER BY orders.order_status_id ASC , orders.creation_time ASC
fulfillment_order.findForCcagent=\
  SELECT fulfillment_orders.* , users_roles.role_id, creation_time FROM fulfillment_orders \
  JOIN ( \
    SELECT order_id, MAX(attempt) AS attempt \
    FROM fulfillment_orders \
    JOIN orders  ON fulfillment_orders.order_id = orders.id \
    WHERE orders.order_status_id IN (5,6) \
    GROUP BY order_id \
    ) AS last_attempt \
  ON last_attempt.order_id = fulfillment_orders.order_id AND last_attempt.attempt = fulfillment_orders.attempt \
  JOIN orders ON fulfillment_orders.order_id = orders.id \
  JOIN users ON orders.user_id = users.id \
  JOIN users_roles ON users.id = users_roles.user_id \
  WHERE (users_roles.role_id IN (5,6)) \
  AND( (fulfillment_orders.ccagent_id = :ccagent_id \
        AND orders.order_status_id IN (5,6)) \
        OR( (fulfillment_orders.ccagent_id != :ccagent_id \
            OR fulfillment_orders.ccagent_id IS NULL \
            ) \
        AND orders.order_status_id IN (5) \
          ) \
      ) \
  ORDER BY orders.order_status_id DESC , users_roles.role_id ASC, creation_time ASC;
#  SELECT fulfillments.* \
#  FROM \
#  ( \
#    (SELECT fulfillment_orders.* , orders.order_status_id , orders.creation_time \
#    FROM fulfillment_orders \
#    JOIN orders  ON fulfillment_orders.order_id = orders.id \
#    WHERE fulfillment_orders.ccagent_id = :ccagent_id \
#    AND orders.order_status_id IN (5,6) \
#    ORDER BY orders.order_status_id DESC) \
#    UNION DISTINCT \
#    (SELECT fulfillment_orders.id, fulfillment_orders.order_id, null AS ccagent_id, \
#    fulfillment_orders.courier_id, fulfillment_orders.confirmation_time, fulfillment_orders.receiving_time, \
#    fulfillment_orders.shipping_time, fulfillment_orders.attempt, orders.order_status_id,  orders.creation_time \
#    FROM fulfillment_orders \
#    JOIN orders ON fulfillment_orders.order_id = orders.id \
#    WHERE orders.order_status_id IN (5)\
#    AND fulfillment_orders.ccagent_id != :ccagent_id) \
#  ) AS fulfillments \
#  ORDER BY ccagent_id, order_status_id DESC, creation_time;

fulfillment_order.findByCourierAndByStatus=\
    SELECT fulfillment_orders.id , orders.id, fulfillment_order.confirmation_time, orders.receiver_address_id, \
    receiver_address.street, orders.sender_address_id, sender_address.street, orders.office_id,\
    office_address.street \
    FROM services \
    JOIN orders ON fulfillment_orders.order_id = orders.id \
    LEFT JOIN offices ON orders.office_id = offices.id \
    LEFT JOIN addresses AS office_address ON offices.address_id = office_address.id \
    JOIN addresses receiver_address ON orders.receiver_address_id = receiver_address.id \
    JOIN addresses sender_address ON orders.sender_address_id = sender_address.id \
    WHERE courier_id = :courier_id  \
    AND orders.order_status_id = :order_status_id
#
fulfillment_order.findAllCourierPoints=\
    SELECT o.id, o.user_id, o.office_id, o.order_status_id, o.sender_address_id, o.receiver_address_id, o.parent_id, \
        o.execution_time, o.creation_time, o.description, o.feedback, o.receiver_availability_time_from, \
        o.receiver_availability_time_to, f.receiving_time, f.shipping_time \
        FROM orders AS o \
        JOIN fulfillment_orders AS f \
        ON o.id = f.order_id \
        WHERE f.courier_id = :courier_id \
        AND (o.order_status_id IN (:order_id1, :order_id2)) \
        AND f.attempt = \
            (SELECT MAX(attempt) \
                FROM fulfillment_orders \
                WHERE order_id=o.id) \
        ORDER BY f.receiving_time ASC
#
fulfilment_order.avg_min_max_sum_by_ccagent=\
SELECT DISTINCT ROUND(AVG(COUNT(*)) OVER(), 2) AS "avg", SUM(COUNT(*)) OVER() AS "count", \
MAX(COUNT(*)) OVER() AS "max", MIN(COUNT(*)) OVER() AS "min" \
FROM fulfillment_orders \
WHERE confirmation_time::date BETWEEN :startDate AND :endDate \
GROUP BY CCAGENT_ID
fulfilment_order.avg_min_max_sum_by_courier=\
SELECT DISTINCT ROUND(AVG(COUNT(*)) OVER(), 2) AS "avg", SUM(COUNT(*)) OVER() AS "count", \
MAX(COUNT(*)) OVER() AS "max", MIN(COUNT(*)) OVER() AS "min" \
FROM fulfillment_orders \
WHERE confirmation_time::date BETWEEN :startDate AND :endDate \
GROUP BY COURIER_ID
#
fulfilment_order.avg_min_max_sum_by_ccagent_manager=\
SELECT DISTINCT ROUND(AVG(COUNT(*)) OVER(), 2) AS "avg", MAX(COUNT(*)) OVER() AS "max", \
MIN(COUNT(*)) OVER() AS "min", SUM(COUNT(*)) OVER() AS "count" \
FROM fulfillment_orders \
JOIN users AS ccagent ON ccagent_id = ccagent.id \
LEFT JOIN users AS manager ON ccagent.manager_id = manager.id \
WHERE manager.id = :id \
AND confirmation_time::date BETWEEN :startDate AND :endDate \
GROUP BY ccagent.id
#
fulfilment_order.avg_min_max_sum_by_courier_manager=\
SELECT DISTINCT ROUND(AVG(COUNT(*)) OVER(), 2) AS "avg", MAX(COUNT(*)) OVER() AS "max", \
MIN(COUNT(*)) OVER() AS "min", SUM(COUNT(*)) OVER() AS "count" \
FROM fulfillment_orders \
JOIN users AS courier ON courier_id = courier.id \
LEFT JOIN users AS manager ON courier.manager_id = manager.id \
WHERE manager.id = :id \
AND confirmation_time::date BETWEEN :startDate AND :endDate \
GROUP BY courier.id
#
order.avg_min_max_sum_by_client=\
SELECT DISTINCT ROUND(AVG(COUNT(*)) OVER(), 2) AS "avg", SUM(COUNT(*)) OVER() AS "count", \
MAX(COUNT(*)) OVER() AS "max", MIN(COUNT(*)) OVER() AS "min" \
FROM orders AS o \
JOIN users AS client ON o.user_id = client.id \
WHERE creation_time::date BETWEEN :startDate AND :endDate \
GROUP BY client.id
#
order.avg_min_max_sum_by_office=\
SELECT DISTINCT ROUND(AVG(COUNT(*)) OVER(), 2) AS "avg", SUM(COUNT(*)) OVER() AS "count", \
MAX(COUNT(*)) OVER() AS "max", MIN(COUNT(*)) OVER() AS "min" \
FROM orders AS o \
LEFT JOIN offices AS office ON o.office_id = office.id \
WHERE creation_time::date BETWEEN :startDate AND :endDate \
GROUP BY office.id
#
fulfilment_order.ordersByCCAgentInCurrentMonth=\
SELECT COUNT(*) \
FROM fulfillment_orders AS f_o \
JOIN users AS agent ON f_o.ccagent_id = agent.id \
WHERE agent.id = :id \
AND EXTRACT(MONTH FROM confirmation_time) = EXTRACT(MONTH FROM NOW());
fulfilment_order.ordersByCourierInCurrentMonth=\
SELECT COUNT(*) \
FROM fulfillment_orders AS f_o \
JOIN users AS c ON f_o.courier_id = c.id \
WHERE c.id = :id \
AND EXTRACT(MONTH FROM confirmation_time) = EXTRACT(MONTH FROM NOW());
#
fulfilment_order.ccagentStat=\
WITH "all_orders" As (SELECT COUNT(*) FROM fulfillment_orders \
WHERE confirmation_time::date BETWEEN :startDate AND :endDate), \
"all_orders_by_manager" As (SELECT COUNT(*) AS "count" \
FROM fulfillment_orders \
JOIN users AS ccagent ON ccagent_id = ccagent.id \
LEFT JOIN users AS manager ON ccagent.manager_id = manager.id \
WHERE manager.id = :id \
AND confirmation_time::date BETWEEN :startDate AND :endDate), \
"avg_manager" As (SELECT DISTINCT AVG(COUNT(*)) OVER() AS "avg"  \
FROM fulfillment_orders \
JOIN users AS ccagent ON ccagent_id = ccagent.id \
LEFT JOIN users AS manager ON ccagent.manager_id = manager.id \
WHERE manager.id = :id \
AND confirmation_time::date BETWEEN :startDate AND :endDate \
GROUP BY ccagent.id), \
"avg_company" As (SELECT DISTINCT AVG(COUNT(*)) OVER() \
FROM fulfillment_orders \
WHERE confirmation_time::date BETWEEN :startDate AND :endDate \
GROUP BY ccagent_id) \
SELECT ccagent.id, ccagent.first_name, ccagent.last_name, \
COUNT(*) AS orders, ROUND(COUNT(*)::decimal/NULLIF((SELECT * FROM all_orders), 0) * 100, 2) "per_company", \
ROUND(COUNT(*)::decimal/NULLIF((SELECT * FROM all_orders_by_manager), 0) * 100, 2) "per_manager", \
ROUND(COUNT(*)::decimal-(SELECT * FROM avg_manager)::decimal, 2) "diff_manager", \
ROUND(COUNT(*)::decimal/(SELECT * FROM avg_company)::decimal, 2) "diff_company" \
FROM fulfillment_orders  \
JOIN users AS ccagent ON ccagent_id = ccagent.id \
LEFT JOIN users AS manager ON ccagent.manager_id = manager.id \
WHERE manager.id = :id \
AND confirmation_time::date BETWEEN :startDate AND :endDate \
GROUP BY ccagent.id \
ORDER BY orders ASC
#
fulfilment_order.courierStat=\
WITH "all_orders" As (SELECT COUNT(*) FROM fulfillment_orders \
WHERE confirmation_time::date BETWEEN :startDate AND :endDate), \
"all_orders_by_manager" As (SELECT COUNT(*) AS "count" \
FROM fulfillment_orders \
JOIN users AS courier ON courier_id = courier.id \
LEFT JOIN users AS manager ON courier.manager_id = manager.id \
WHERE manager.id = :id \
AND confirmation_time::date BETWEEN :startDate AND :endDate), \
"avg_manager" As (SELECT DISTINCT AVG(COUNT(*)) OVER() AS "avg"  \
FROM fulfillment_orders \
JOIN users AS courier ON courier_id = courier.id \
LEFT JOIN users AS manager ON courier.manager_id = courier.id \
WHERE manager.id = :id \
AND confirmation_time::date BETWEEN :startDate AND :endDate \
GROUP BY courier.id), \
"avg_company" As (SELECT DISTINCT AVG(COUNT(*)) OVER() \
FROM fulfillment_orders \
WHERE confirmation_time::date BETWEEN :startDate AND :endDate \
GROUP BY courier_id) \
SELECT courier.id, courier.first_name, courier.last_name, \
COUNT(*) AS orders, ROUND(COUNT(*)::decimal/NULLIF((SELECT * FROM all_orders), 0) * 100, 2) "per_company", \
ROUND(COUNT(*)::decimal/NULLIF((SELECT * FROM all_orders_by_manager), 0) * 100, 2) "per_manager", \
ROUND(COUNT(*)::decimal-(SELECT * FROM avg_manager)::decimal, 2) "diff_manager", \
ROUND(COUNT(*)::decimal/(SELECT * FROM avg_company)::decimal, 2) "diff_company" \
FROM fulfillment_orders  \
JOIN users AS courier ON courier_id = courier.id \
LEFT JOIN users AS manager ON courier.manager_id = manager.id \
WHERE manager.id = :id \
AND confirmation_time::date BETWEEN :startDate AND :endDate \
GROUP BY courier.id \
ORDER BY orders ASC
#
order.clientStat=\
WITH "all_orders" As (SELECT COUNT(*) FROM orders \
WHERE creation_time::date BETWEEN :startDate AND :endDate),\
"avg" AS (SELECT DISTINCT AVG(COUNT(*)) OVER() AS "avg" \
FROM orders AS ord \
JOIN users AS clients ON ord.user_id = clients.id \
WHERE creation_time::date BETWEEN :startDate AND :endDate \
GROUP BY clients.id)\
SELECT client.id, client.first_name, r.name "status", client.last_name, \
COUNT(*) "orders", ROUND(COUNT(*)::decimal/NULLIF((SELECT * FROM all_orders)::decimal, 0) * 100, 2) "per_company", \
ROUND(COUNT(*)::decimal/NULLIF((SELECT * FROM avg)::decimal,0), 2) "diff_company" \
FROM orders AS o \
JOIN users AS client ON o.user_id = client.id \
JOIN users_roles AS u_r ON client.id = u_r.user_id \
JOIN roles AS r ON u_r.role_id = r.id \
WHERE (r.name = 'CLIENT' OR r.name = 'VIP_CLIENT') \
AND creation_time::date BETWEEN :startDate AND :endDate \
GROUP BY client.id, r.id \
ORDER BY orders ASC
#
order.officeStat=\
WITH "all_orders" As (SELECT COUNT(*) FROM orders \
WHERE creation_time::date BETWEEN :startDate AND :endDate),\
"avg" AS (SELECT DISTINCT AVG(COUNT(*)) OVER() AS "avg" \
FROM orders AS ord \
LEFT JOIN offices AS office ON ord.user_id = office.id \
WHERE creation_time::date BETWEEN :startDate AND :endDate \
GROUP BY office.id)\
SELECT office.id, office.name,\
COUNT(*) "orders", ROUND(COUNT(*)::decimal/NULLIF((SELECT * FROM all_orders)::decimal, 0) * 100, 2) "per_company", \
ROUND(COUNT(*)::decimal/NULLIF((SELECT * FROM avg)::decimal,0), 2) "diff_company" \
FROM orders AS o \
LEFT JOIN offices AS office ON o.office_id = office.id \
WHERE creation_time::date BETWEEN :startDate AND :endDate \
GROUP BY office.id \
ORDER BY orders ASC
#
fulfillment_order.find_last_12_month_emp_statistic=\
SELECT DISTINCT COUNT(*) "days", \
EXTRACT (MONTH FROM workday_start::date) "month" , EXTRACT (YEAR FROM workday_start::date) "year", \
(SELECT COUNT(*) \
FROM fulfillment_orders AS f_o \
JOIN orders AS o ON f_o.order_id = o.id \
WHERE ccagent_id = w_d.user_id \
AND (EXTRACT(MONTH FROM confirmation_time) = EXTRACT(MONTH FROM w_d.workday_start::date) \
AND EXTRACT(YEAR FROM confirmation_time) = EXTRACT(YEAR FROM w_d.workday_start::date))) "ccagent_count", \
(SELECT COUNT(*) \
FROM fulfillment_orders AS f_o \
JOIN orders AS o ON f_o.order_id = o.id \
WHERE courier_id = w_d.user_id \
AND (EXTRACT(MONTH FROM confirmation_time) = EXTRACT(MONTH FROM w_d.workday_start::date) \
AND EXTRACT(YEAR FROM confirmation_time) = EXTRACT(YEAR FROM w_d.workday_start::date))) "courier_count" \
FROM working_days AS w_d \
WHERE user_id = :id \
AND worked_out = TRUE \
GROUP BY w_d.user_id, EXTRACT (YEAR FROM w_d.workday_start::date), EXTRACT (MONTH FROM w_d.workday_start::date),\
w_d.workday_start \
HAVING w_d.workday_start::date BETWEEN NOW()::date - '12 months'::interval AND NOW()::date \
ORDER BY "year" DESC, "month" DESC
#
order.findById=SELECT  id, user_id,  office_id, order_status_id, receiver_address_id, \
  sender_address_id, description, feedback, creation_time, execution_time, parent_id, \
  receiver_availability_time_from, receiver_availability_time_to \
  FROM orders \
  WHERE id=:id
#
order.deleteById=DELETE FROM orders WHERE id=:id
#
order.update=UPDATE orders \
  SET (user_id, office_id, order_status_id, receiver_address_id, \
  sender_address_id, description, feedback, creation_time, execution_time, \
  receiver_availability_time_from, receiver_availability_time_to) \
  = (:user_id, :office_id, :order_status_id, :receiver_address_id, \
  :sender_address_id, :description, :feedback, :creation_time, :execution_time, \
  :receiver_availability_time_from, :receiver_availability_time_to)  \
  WHERE id=:id
#
order.findAllOrders=SELECT id, user_id,  office_id, order_status_id, receiver_address_id, \
  sender_address_id, description, feedback, creation_time, execution_time, parent_id, \
  receiver_availability_time_from, receiver_availability_time_to \
  FROM orders
#
order.findAllOpenOrders=SELECT id, user_id,  office_id, order_status_id, receiver_address_id, \
  sender_address_id, description, feedback, creation_time, execution_time, parent_id, \
  receiver_availability_time_from, receiver_availability_time_to \
  FROM orders \
  WHERE order_status_id=5
#
order.findAllProcessingOrders=\
  SELECT id, user_id,  office_id, order_status_id, receiver_address_id, sender_address_id, \
  description, feedback, creation_time, execution_time, parent_id, \
  receiver_availability_time_from, receiver_availability_time_to\
  FROM orders \
  WHERE order_status_id=3
order.findByUserId=\
  SELECT id, user_id,  office_id, order_status_id, receiver_address_id, \
  sender_address_id, description, feedback, creation_time, execution_time, parent_id, \
  receiver_availability_time_from, receiver_availability_time_to \
  FROM orders WHERE user_id = :user_id
order.findAllConfirmedOrders=\
SELECT o.id, o.user_id,  o.office_id, o.order_status_id, o.receiver_address_id, o.sender_address_id, \
o.description, o.feedback, o.creation_time, o.execution_time, o.parent_id, \
o.receiver_availability_time_from, o.receiver_availability_time_to \
FROM orders AS o \
JOIN order_status AS o_s ON o.order_status_id = o_s.id \
JOIN users AS u ON o.user_id = u.id \
JOIN users_roles AS u_r ON u.id = u_r.user_id \
JOIN roles AS r ON u_r.role_id = r.id \
WHERE o_s.name = 'CONFIRMED' \
ORDER BY r.id ASC, o.creation_time ASC
#
order.findOrderForUser =\
  SELECT o.id, o.user_id,  o.office_id, o.order_status_id, o.receiver_address_id, o.sender_address_id, \
  o.description, o.feedback, o.creation_time, o.execution_time, o.parent_id, \
  o.receiver_availability_time_from, o.receiver_availability_time_to \
  FROM orders AS o \
  WHERE o.id = :orderId AND o.user_id =:userId;
#
working_day.findById=SELECT id, user_id, workday_end, workday_start, worked_out \
  FROM working_days \
  WHERE id=:id
#
working_day.getAll=SELECT id, user_id, workday_end, workday_start, worked_out \
  FROM working_days
#
working_day.findByUserId=SELECT id, user_id, workday_end, workday_start, worked_out \
  FROM working_days \
  WHERE user_id=:user_id
#
working_day.findActualByUserId=\
  SELECT id, user_id, workday_end, workday_start, worked_out \
    FROM working_days \
    WHERE user_id=:user_id \
    AND workday_end::date >= current_date
#
working_day.deleteById=DELETE \
  FROM working_days \
  WHERE id=:id
#
working_day.update=UPDATE working_days \
  SET (user_id, workday_end, workday_start, worked_out) \
  = (:user_id, :workday_end, :workday_start, :worked_out)  \
  WHERE id=:id
#
working_day.findMonthCalendar=\
with first_day_of_month as ( \
SELECT * \
FROM generate_series(date_trunc('month', now()), \
date_trunc('month', now() + interval '1 month') - interval '1 day', '1 day'::interval) as firstday \
) \
select row_number() OVER () "id",\
(SELECT id \
FROM working_days \
WHERE user_id = :id \
AND workday_start::date = firstday \
LIMIT 1 ) "wd_id", firstday "day", (SELECT workday_start \
FROM working_days \
WHERE user_id = :id \
AND workday_start::date = firstday \
LIMIT 1 ) "start_work", \
(SELECT workday_end \
FROM working_days \
WHERE user_id = :id \
AND workday_end::date = firstday \
LIMIT 1 ) "end_work", \
(SELECT worked_out \
FROM working_days \
WHERE user_id = :id \
AND workday_end::date = firstday \
LIMIT 1 ) "worked_out" \
FROM first_day_of_month
#
order_status.findById=SELECT id, name, description \
  FROM order_status \
  WHERE id=:id
#
order_status.deleteById=DELETE FROM order_status \
  WHERE id=:id
#
order_status.update=UPDATE order_status \
  SET (name, description) \
   = (:name, :description)  \
  WHERE id=:id
#
#
role.findById=SELECT id, name, description \
  FROM roles \
  WHERE id=:id
#
role.deleteById=DELETE FROM roles \
  WHERE id=:id
#
role.update=UPDATE roles \
  SET (name, description) \
  = (:name, :description)  \
  WHERE id=:id
#
role.findByUserId=SELECT role_id \
  FROM users_roles \
  WHERE user_id=:user_id
#
courier.findAllFreeCouriers=\
    SELECT u.id, u.email, u.first_name, u.last_name, u.phone_number, u.current_position_id, u.manager_id, u.address_id, \
        u.registration_date \
        FROM users AS u \
        JOIN users_roles AS ur ON u.id = ur.user_id \
        JOIN working_days AS wd ON u.id = wd.user_id \
        WHERE ur.role_id = :courier_role_id \
        AND u.id NOT IN \
            (SELECT ffo.courier_id \
                FROM fulfillment_orders AS ffo \
                JOIN orders AS o ON ffo.order_id=o.id \
                WHERE o.order_status_id IN (:execution_status_id, :delivering_status_id) \
                AND ffo.attempt = \
                    (SELECT MAX(attempt) \
                        FROM fulfillment_orders \
                        WHERE order_id=o.id)) \
        AND CURRENT_TIMESTAMP BETWEEN wd.workday_start AND wd.workday_end \
        GROUP BY u.id
#
courier.findAllAvailableCouriers=\
    SELECT  u.id, u.email, u.first_name, u.last_name, u.phone_number, u.current_position_id, \
        u.manager_id, u.address_id, u.registration_date \
        FROM users AS u \
        JOIN users_roles AS ur ON u.id=ur.user_id \
        JOIN working_days AS wd ON u.id = wd.user_id \
        WHERE (ur.role_id = :courier_role_id) \
        AND \
            ((SELECT COUNT(orders.id) \
                FROM fulfillment_orders \
                JOIN users ON fulfillment_orders.courier_id=users.id \
                JOIN orders ON fulfillment_orders.order_id=orders.id \
                WHERE orders.order_status_id IN (:execution_status_id, :delivering_status_id) \
                AND users.id=u.id \
                AND (fulfillment_orders.attempt = \
                    (SELECT MAX(attempt) \
                        FROM fulfillment_orders \
                        WHERE order_id=orders.id))) \
             < :max_orders) \
        AND (CURRENT_TIMESTAMP BETWEEN wd.workday_start AND wd.workday_end) \
        GROUP BY u.id
#
courier.findAllCouriers=\
    SELECT u.id, u.email, u.first_name, u.last_name, u.phone_number, u.current_position_id, \
        u.manager_id, u.address_id, u.registration_date \
        FROM users AS u \
        JOIN users_roles AS ur ON u.id=ur.user_id \
        WHERE ur.role_id = :courier_role_id \
        GROUP BY u.id
#
courier.countQuantityOfCurrentOrders=\
  SELECT COUNT(o.id) \
    FROM fulfillment_orders AS ffo \
    JOIN users AS u ON ffo.courier_id=u.id \
    JOIN orders AS o ON ffo.order_id=o.id \
    WHERE (o.order_status_id IN (:execution_status_id, :delivering_status_id)) \
    AND (u.id=:courier_id) \
    AND (ffo.attempt = \
        (SELECT MAX(attempt) \
            FROM fulfillment_orders \
            WHERE order_id=o.id))
#
ccagent.findWorkingCcagents=\ \
  SELECT row_number() OVER () AS row_number, workload_ccagents.* \
  FROM \
    ( SELECT users.id , COALESCE(ccount , 0) AS processing_orders , working_days.workday_end, \
        COALESCE(daily_performance, 0) AS daily_performance \
    FROM users \
    LEFT JOIN \
        ( SELECT ccagent_id , COUNT(*) AS ccount \
        FROM orders \
        JOIN fulfillment_orders ON orders.id = fulfillment_orders.order_id \
        JOIN users ON fulfillment_orders.ccagent_id = users.id \
        JOIN working_days ON working_days.user_id = users.id \
        WHERE order_status_id IN (6) \
        AND CURRENT_TIMESTAMP BETWEEN working_days.workday_start \
        AND working_days.workday_end \
        GROUP BY ccagent_id \
        ) AS processing \
    ON processing.ccagent_id = users.id \
    LEFT JOIN \
        ( SELECT ccagent_id , \
            ROUND ((COUNT(*)  /EXTRACT ('hour' from   CURRENT_TIMESTAMP - working_days.workday_start)) * 8 ) AS daily_performance \
        FROM orders \
        JOIN fulfillment_orders ON orders.id = fulfillment_orders.order_id \
        JOIN users ON fulfillment_orders.ccagent_id = users.id \
        JOIN working_days ON working_days.user_id = users.id \
        WHERE order_status_id IN (7,8,9,10,11,12) \
        AND CURRENT_TIMESTAMP BETWEEN working_days.workday_start \
        AND working_days.workday_end \
        AND fulfillment_orders.confirmation_time > working_days.workday_start \
        GROUP BY ccagent_id,  working_days.workday_start \
        ) AS performance \
    ON performance.ccagent_id = users.id \
    JOIN users_roles ON users.id = users_roles.user_id \
    JOIN working_days ON working_days.user_id = users.id \
    WHERE users_roles.role_id = 3 \
    AND CURRENT_TIMESTAMP BETWEEN working_days.workday_start \
    AND working_days.workday_end \
    ORDER BY daily_performance DESC, processing_orders ASC, workday_end DESC\
  ) AS workload_ccagents
#
ccagent.find_open_fullfilments=\
  SELECT row_number() OVER () AS row_number, open_fulfillments.* \
  FROM \
  ( \
    SELECT fulfillment_orders.id AS fulfillment_order_id, fulfillment_orders.order_id   AS order_id, \
    fulfillment_orders.attempt AS attempt, orders.creation_time AS creation_time, \
    fulfillment_orders.ccagent_id AS ccagent_id,  orders.user_id, users_roles.role_id \
    FROM fulfillment_orders \
    JOIN orders ON fulfillment_orders.order_id = orders.id \
    JOIN order_status ON orders.order_status_id = order_status.id \
    JOIN users ON orders.user_id = users.id \
    JOIN users_roles ON users.id = users_roles.user_id \
    WHERE orders.order_status_id = 5 \
    AND users_roles.role_id IN (5, 6) \
    ORDER BY role_id ASC, \
    creation_time ASC, \
    attempt ASC \
  ) AS open_fulfillments;
#
#
#SELECT u.id, u.email, u.password, u.first_name, u.last_name,\
#u.phone_number, u.manager_id, u.address_id, u.registration_date\
#FROM users AS u\
#JOIN users_roles AS ur ON u.id = ur.user_id\
#JOIN roles AS r ON r.id = ur.role_id\
#JOIN fulfillment_orders AS ffo ON ffo.courier_id = u.id\
#JOIN orders AS ord ON ffo.order_id = ord.id\
#WHERE r.name = 'COURIER' AND (ffo.confirmation_time::date <> curent_date OR ord.execution_time IS NOT NULL)

